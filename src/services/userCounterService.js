/**
 * ğŸ†• SERWIS AUTOMATYCZNEJ AKTUALIZACJI LICZNIKÃ“W UÅ»YTKOWNIKÃ“W
 *
 * Ten serwis obsÅ‚uguje automatycznÄ… aktualizacjÄ™ licznikÃ³w po zatwierdzeniu/odrzuceniu zgÅ‚oszeÅ„.
 * WywoÅ‚ywany z SubmissionDetailPage.jsx po akceptacji/odrzuceniu EkoDziaÅ‚aÅ„ i EkoWyzwaÅ„.
 *
 * GÅ‚Ã³wne funkcje:
 * - updateUserCountersOnApproval() - zwiÄ™ksza liczniki po zatwierdzeniu
 * - revertUserCountersOnRejection() - cofa liczniki po odrzuceniu zatwierdzonego zgÅ‚oszenia
 * - checkAndUpdateNewBadges() - sprawdza i przyznaje nowe odznaki
 */

import { doc, updateDoc, increment, getDoc } from "firebase/firestore";
import { db } from "./firebase";
import { getBadgeTemplates, calculateBadgeProgress } from "./badgeService";
import { createBadgeEarnedNotification } from "./notificationAutomationService";
import { addBadgeFeedItem } from "./activityFeedService";

/**
 * Sprawdza czy uÅ¼ytkownik zdobyÅ‚ nowe odznaki i aktualizuje je w profilu
 * @param {string} userId - ID uÅ¼ytkownika
 * @returns {Array} Nowo zdobyte odznaki
 */
export const checkAndUpdateNewBadges = async (userId) => {
  try {
    // Pobierz aktualne dane uÅ¼ytkownika
    const userDoc = await getDoc(doc(db, "users", userId));
    if (!userDoc.exists()) {
      console.warn("UÅ¼ytkownik nie istnieje:", userId);
      return [];
    }

    const userData = userDoc.data();
    const userCounters = userData.counters || {};
    const currentEarnedBadges = userData.earnedBadges || {};

    // Pobierz szablony odznak i oblicz postÄ™p
    const badgeTemplates = await getBadgeTemplates();
    const badgeProgress = calculateBadgeProgress(
      userCounters,
      currentEarnedBadges,
      badgeTemplates,
    );

    // ZnajdÅº nowo zdobyte odznaki
    const newlyEarnedBadges = [];
    const badgeUpdates = {};

    badgeProgress.forEach((badge) => {
      if (badge.isEarned && badge.currentLevel > 0) {
        const currentBadge = currentEarnedBadges[badge.id];

        // SprawdÅº czy to nowa odznaka lub wyÅ¼szy poziom
        if (!currentBadge || currentBadge.lvl < badge.currentLevel) {
          const newBadgeData = {
            lvl: badge.currentLevel,
            unlockedAt: new Date().toISOString(),
          };

          badgeUpdates[`earnedBadges.${badge.id}`] = newBadgeData;

          newlyEarnedBadges.push({
            id: badge.id,
            name: badge.name,
            level: badge.currentLevel,
            previousLevel: currentBadge?.lvl || 0,
          });
        }
      }
    });

    // JeÅ›li sÄ… nowe odznaki, zaktualizuj profil uÅ¼ytkownika
    if (Object.keys(badgeUpdates).length > 0) {
      const userRef = doc(db, "users", userId);
      await updateDoc(userRef, badgeUpdates);

      console.log(
        `Zaktualizowano odznaki dla uÅ¼ytkownika ${userId}:`,
        newlyEarnedBadges,
      );
    }

    return newlyEarnedBadges;
  } catch (error) {
    console.error("BÅ‚Ä…d podczas sprawdzania nowych odznak:", error);
    return [];
  }
};

/**
 * Aktualizuje liczniki uÅ¼ytkownika po zatwierdzeniu zgÅ‚oszenia
 * @param {string} userId - ID uÅ¼ytkownika
 * @param {Object} ecoActivity - Dane EkoDziaÅ‚ania lub EkoWyzwania
 * @param {string} submissionType - Typ zgÅ‚oszenia: "eco_action" lub "challenge"
 * @param {string} [userClassId] - ID klasy uÅ¼ytkownika (do feed aktywnoÅ›ci)
 * @param {string} [userName] - Nazwa uÅ¼ytkownika (do feed aktywnoÅ›ci)
 */
export const updateUserCountersOnApproval = async (
  userId,
  ecoActivity,
  submissionType,
  userClassId = null,
  userName = null,
) => {
  try {
    const userRef = doc(db, "users", userId);

    // Przygotuj aktualizacje licznikÃ³w
    const counterUpdates = {};

    if (submissionType === "eco_action") {
      // ZwiÄ™ksz totalActions
      counterUpdates["counters.totalActions"] = increment(1);

      // ZwiÄ™ksz odpowiedni licznik kategorii na podstawie counterToIncrement
      if (ecoActivity.counterToIncrement) {
        counterUpdates[`counters.${ecoActivity.counterToIncrement}`] =
          increment(1);
      }
    } else if (submissionType === "challenge") {
      // ZwiÄ™ksz totalChallenges
      counterUpdates["counters.totalChallenges"] = increment(1);

      // JeÅ›li EkoWyzwanie ma kategoriÄ™, zwiÄ™ksz odpowiedni licznik
      if (ecoActivity.counterToIncrement) {
        counterUpdates[`counters.${ecoActivity.counterToIncrement}`] =
          increment(1);
      }
    }

    // Zaktualizuj liczniki w bazie danych
    await updateDoc(userRef, counterUpdates);

    console.log(
      `Zaktualizowano liczniki dla uÅ¼ytkownika ${userId}:`,
      counterUpdates,
    );

    // SprawdÅº czy uÅ¼ytkownik zdobyÅ‚ nowe odznaki
    const newBadges = await checkAndUpdateNewBadges(userId);

    // WyÅ›lij powiadomienia i dodaj do feed aktywnoÅ›ci dla nowych odznak
    for (const badge of newBadges) {
      try {
        await createBadgeEarnedNotification(userId, badge.name, badge.level);
        console.log(
          `WysÅ‚ano powiadomienie o nowej odznace: ${badge.name} poziom ${badge.level}`,
        );
      } catch (notificationError) {
        console.error(
          "BÅ‚Ä…d podczas wysyÅ‚ania powiadomienia o odznace:",
          notificationError,
        );
        // Nie przerywamy procesu jeÅ›li powiadomienie siÄ™ nie uda
      }

      // Dodaj wpis do feed aktywnoÅ›ci jeÅ›li mamy dane o klasie i nazwie uÅ¼ytkownika
      if (userClassId && userName) {
        try {
          await addBadgeFeedItem(
            userClassId,
            userName,
            `${badge.name} (poziom ${badge.level})`,
          );
          console.log(
            `Dodano wpis do feed aktywnoÅ›ci o nowej odznace: ${badge.name}`,
          );
        } catch (feedError) {
          console.error(
            "BÅ‚Ä…d podczas dodawania wpisu do feed aktywnoÅ›ci:",
            feedError,
          );
          // Nie przerywamy procesu jeÅ›li feed siÄ™ nie uda
        }
      }
    }

    return { success: true, updates: counterUpdates, newBadges };
  } catch (error) {
    console.error("BÅ‚Ä…d podczas aktualizacji licznikÃ³w uÅ¼ytkownika:", error);
    throw new Error(`Nie udaÅ‚o siÄ™ zaktualizowaÄ‡ licznikÃ³w: ${error.message}`);
  }
};

/**
 * Cofa aktualizacjÄ™ licznikÃ³w uÅ¼ytkownika (np. gdy zgÅ‚oszenie zostaje odrzucone po zatwierdzeniu)
 * @param {string} userId - ID uÅ¼ytkownika
 * @param {Object} ecoActivity - Dane EkoDziaÅ‚ania lub EkoWyzwania
 * @param {string} submissionType - Typ zgÅ‚oszenia: "eco_action" lub "challenge"
 */
export const revertUserCountersOnRejection = async (
  userId,
  ecoActivity,
  submissionType,
) => {
  try {
    const userRef = doc(db, "users", userId);

    // Przygotuj aktualizacje licznikÃ³w (odejmowanie)
    const counterUpdates = {};

    if (submissionType === "eco_action") {
      // Zmniejsz totalActions
      counterUpdates["counters.totalActions"] = increment(-1);

      // Zmniejsz odpowiedni licznik kategorii na podstawie counterToIncrement
      if (ecoActivity.counterToIncrement) {
        counterUpdates[`counters.${ecoActivity.counterToIncrement}`] =
          increment(-1);
      }
    } else if (submissionType === "challenge") {
      // Zmniejsz totalChallenges
      counterUpdates["counters.totalChallenges"] = increment(-1);

      // JeÅ›li EkoWyzwanie ma kategoriÄ™, zmniejsz odpowiedni licznik
      if (ecoActivity.counterToIncrement) {
        counterUpdates[`counters.${ecoActivity.counterToIncrement}`] =
          increment(-1);
      }
    }

    // Zaktualizuj liczniki w bazie danych
    await updateDoc(userRef, counterUpdates);

    console.log(`CofniÄ™to liczniki dla uÅ¼ytkownika ${userId}:`, counterUpdates);

    return { success: true, updates: counterUpdates };
  } catch (error) {
    console.error("BÅ‚Ä…d podczas cofania licznikÃ³w uÅ¼ytkownika:", error);
    throw new Error(`Nie udaÅ‚o siÄ™ cofnÄ…Ä‡ licznikÃ³w: ${error.message}`);
  }
};

/**
 * Pobiera aktualne liczniki uÅ¼ytkownika
 * @param {string} userId - ID uÅ¼ytkownika
 * @returns {Object} Aktualne liczniki uÅ¼ytkownika
 */
export const getUserCounters = async (userId) => {
  try {
    const userDoc = await getDoc(doc(db, "users", userId));
    if (!userDoc.exists()) {
      throw new Error("UÅ¼ytkownik nie istnieje");
    }

    const userData = userDoc.data();
    return userData.counters || {};
  } catch (error) {
    console.error("BÅ‚Ä…d podczas pobierania licznikÃ³w uÅ¼ytkownika:", error);
    throw new Error(`Nie udaÅ‚o siÄ™ pobraÄ‡ licznikÃ³w: ${error.message}`);
  }
};
