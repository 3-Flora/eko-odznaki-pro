rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===== FUNKCJE POMOCNICZE =====
    
    // Funkcja pomocnicza do sprawdzania roli u≈ºytkownika
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Sprawdza czy u≈ºytkownik jest zalogowany
    function isAuthenticated() {
      return request.auth != null;
    }

    // Sprawdza czy u≈ºytkownik jest zweryfikowany (dla uczni√≥w)
    function isUserVerified(userId) {
      let userData = get(/databases/$(database)/documents/users/$(userId)).data;
      return userData.isVerified == true;
    }

    // Funkcja sprawdzajƒÖca, czy nauczyciel zarzƒÖdza danƒÖ klasƒÖ
    function isTeacherOfClass(classId) {
      let teacherId = get(/databases/$(database)/documents/classes/$(classId)).data.teacherId;
      return request.auth.uid == teacherId;
    }
    
    // Funkcja sprawdzajƒÖca, czy zalogowany u≈ºytkownik ma rolƒô 'ekoskop'
    function isRequestUserEkoskop() {
      return getUserRole(request.auth.uid) == 'ekoskop';
    }

    // Sprawdza czy u≈ºytkownik nale≈ºy do konkretnej klasy
    function isUserInClass(userId, classId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.classId == classId;
    }

    // Walidacja danych u≈ºytkownika przy tworzeniu/aktualizacji
    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'displayName', 'role']) &&
             data.role in ['student', 'teacher', 'ekoskop'] &&
             data.email is string &&
             data.displayName is string;
    }

    // Walidacja zg≈Çoszenia EkoDzia≈Çania
    function isValidSubmission() {
      let data = request.resource.data;
      return data.keys().hasAll(['studentId', 'classId', 'ecoActionId', 'createdAt']) &&
             data.studentId is string &&
             data.classId is string &&
             data.ecoActionId is string &&
             data.createdAt is timestamp &&
             (data.status == null || data.status in ['approved', 'rejected', 'pending']);
    }

    // Walidacja zg≈Çoszenia EkoWyzwania
    function isValidChallengeSubmission() {
      let data = request.resource.data;
      return data.keys().hasAll(['studentId', 'ecoChallengeId', 'classId', 'createdAt']) &&
             data.studentId is string &&
             data.ecoChallengeId is string &&
             data.classId is string &&
             data.createdAt is timestamp &&
             data.status in ['approved', 'rejected', 'pending'];
    }

    // üÜï WALIDACJA AKTUALIZACJI LICZNIK√ìW I ODZNAK
    // Sprawdza czy aktualizacja licznik√≥w jest prawid≈Çowa (userCounterService.js)
    function isValidCounterUpdate() {
      let data = request.resource.data;
      let oldData = resource.data;
      
      // Lista dozwolonych p√≥l w counters
      let allowedCounterFields = ['totalActions', 'totalChallenges', 'recyclingActions', 
                                  'educationActions', 'savingActions', 'transportActions', 
                                  'energyActions', 'foodActions', 'totalActiveDays'];
      
      // Sprawd≈∫ czy modyfikowane sƒÖ tylko dozwolone pola
      return (
        // Je≈õli counters sƒÖ modyfikowane, sprawd≈∫ dozwolone pola
        (!('counters' in data.diff(oldData).affectedKeys()) || 
         data.counters.diff(oldData.counters).affectedKeys().hasOnly(allowedCounterFields)) &&
        
        // earnedBadges mo≈ºe byƒá modyfikowane (dodawanie nowych odznak)
        (!('earnedBadges' in data.diff(oldData).affectedKeys()) || 
         data.earnedBadges is map)
      );
    }

    // ===== REGU≈ÅY BEZPIECZE≈ÉSTWA =====

    // KOLEKCJA: users
    match /users/{userId} {
      // Ka≈ºdy zalogowany mo≈ºe czytaƒá profile innych (potrzebne do ranking√≥w, feed'√≥w)
      allow read: if isAuthenticated();
      
      // U≈ºytkownik mo≈ºe modyfikowaƒá tylko swoje dane
      allow write: if isAuthenticated() && 
                      request.auth.uid == userId;

      // Nauczyciel mo≈ºe modyfikowaƒá weryfikacjƒô ucznia swojej klasy
      allow update: if isAuthenticated() && 
                       getUserRole(request.auth.uid) == 'teacher' &&
                       isUserInClass(userId, get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId) &&
                       // Nauczyciel mo≈ºe tylko zmieniaƒá isVerified
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isVerified']);

      // üÜï AUTOMATYCZNA AKTUALIZACJA LICZNIK√ìW I ODZNAK
      // Nauczyciel mo≈ºe aktualizowaƒá liczniki i odznaki ucznia z jego klasy 
      // (automatyczne po zatwierdzeniu zg≈Çosze≈Ñ - userCounterService.js)
      allow update: if isAuthenticated() && 
                       getUserRole(request.auth.uid) == 'teacher' &&
                       isUserInClass(userId, get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId) &&
                       // Mo≈ºna tylko aktualizowaƒá pola zwiƒÖzane z licznikami i odznakami
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasAny(['counters', 'earnedBadges']) &&
                       // Sprawd≈∫ czy modyfikowane sƒÖ tylko dozwolone pola counters
                       isValidCounterUpdate();
    }

    // KOLEKCJA: schools
    match /schools/{schoolId} {
      // Wszystkich zalogowani mogƒÖ przeglƒÖdaƒá szko≈Çy (potrzebne przy rejestracji)
      allow read: if isAuthenticated();
      
      // Tylko EKOSKOP mo≈ºe zarzƒÖdzaƒá szko≈Çami
      allow write: if isAuthenticated() && isRequestUserEkoskop();
    }

    // KOLEKCJA: classes
    match /classes/{classId} {
      // Wszyscy zalogowani mogƒÖ przeglƒÖdaƒá klasy (potrzebne przy rejestracji)
      allow read: if isAuthenticated();
      
      // Tylko nauczyciel klasy lub EKOSKOP mo≈ºe modyfikowaƒá
      allow write: if isAuthenticated() && 
                      (isTeacherOfClass(classId) || isRequestUserEkoskop());
    }

    // KOLEKCJA: ecoActions (szablony EkoDzia≈Ça≈Ñ)
    match /ecoActions/{ecoActionId} {
      // Wszyscy zalogowani mogƒÖ czytaƒá szablony dzia≈Ça≈Ñ
      allow read: if isAuthenticated();
      
      // Tylko EKOSKOP mo≈ºe zarzƒÖdzaƒá szablonami
      allow write: if isAuthenticated() && isRequestUserEkoskop();
    }

    // KOLEKCJA: badgeTemplates (szablony odznak)
    match /badgeTemplates/{badgeId} {
      // Wszyscy zalogowani mogƒÖ czytaƒá definicje odznak
      allow read: if isAuthenticated();
      
      // Tylko EKOSKOP mo≈ºe tworzyƒá i modyfikowaƒá odznaki
      allow write: if isAuthenticated() && isRequestUserEkoskop();
    }

    // KOLEKCJA: ecoChallenges (wyzwania przypisane do klas)
    match /ecoChallenges/{assignmentId} {
      // U≈ºytkownicy mogƒÖ czytaƒá przypisane wyzwania
      allow read: if isAuthenticated();
    }

    // KOLEKCJA: submissions (zg≈Çoszenia EkoDzia≈Ça≈Ñ)
    match /submissions/{submissionId} {
      // Ucze≈Ñ mo≈ºe tworzyƒá zg≈Çoszenie tylko dla siebie, je≈õli jest zweryfikowany
      allow create: if isAuthenticated() && 
                       request.resource.data.studentId == request.auth.uid &&
                       isUserVerified(request.auth.uid) &&
                       isValidSubmission() &&
                       isUserInClass(request.auth.uid, request.resource.data.classId);

      // Ucze≈Ñ mo≈ºe czytaƒá swoje zg≈Çoszenia
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.studentId;

      // Nauczyciel mo≈ºe czytaƒá zg≈Çoszenia ze swojej klasy
      allow read: if isAuthenticated() && 
                     getUserRole(request.auth.uid) == 'teacher' &&
                     resource.data.classId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId;

      // üÜï AUTOMATYCZNA AKTUALIZACJA STATUSU ZG≈ÅOSZENIA
      // Tylko nauczyciel mo≈ºe zmieniaƒá status zg≈Çosze≈Ñ uczni√≥w ze swojej klasy
      // Po zatwierdzeniu nastƒôpuje automatyczna aktualizacja licznik√≥w (SubmissionDetailPage.jsx -> userCounterService.js)
      allow update: if isAuthenticated() && 
                       getUserRole(request.auth.uid) == 'teacher' &&
                       resource.data.classId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId &&
                       request.resource.data.status in ['approved', 'rejected', 'pending'] &&
                       // Zabezpieczenie - mo≈ºna tylko zmieniƒá pola zwiƒÖzane z ocenƒÖ
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['status', 'rejectionReason', 'reviewedBy', 'reviewedAt']);
    }

    // KOLEKCJA: challengeSubmissions (zg≈Çoszenia EkoWyzwa≈Ñ)
    match /challengeSubmissions/{submissionId} {
      // Ucze≈Ñ mo≈ºe tworzyƒá zg≈Çoszenie dla siebie, je≈õli jest zweryfikowany
      allow create: if isAuthenticated() && 
                       request.resource.data.studentId == request.auth.uid &&
                       isUserVerified(request.auth.uid) &&
                       isValidChallengeSubmission() &&
                       isUserInClass(request.auth.uid, request.resource.data.classId);

      // Ucze≈Ñ mo≈ºe czytaƒá swoje zg≈Çoszenia
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.studentId;

      // Nauczyciel mo≈ºe czytaƒá zg≈Çoszenia ze swojej klasy
      allow read: if isAuthenticated() && 
                     getUserRole(request.auth.uid) == 'teacher' &&
                     resource.data.classId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId;

      // Nauczyciel mo≈ºe zmieniaƒá status zg≈Çosze≈Ñ uczni√≥w ze swojej klasy
      allow update: if isAuthenticated() && 
                       getUserRole(request.auth.uid) == 'teacher' &&
                       resource.data.classId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId &&
                       request.resource.data.status in ['approved', 'rejected', 'pending'] &&
                       // Zabezpieczenie - mo≈ºna tylko zmieniƒá pola zwiƒÖzane z ocenƒÖ
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['status', 'rejectionReason', 'reviewedBy', 'reviewedAt']);
    }

    // KOLEKCJA: activityFeeds (feed aktywno≈õci klas)
    match /activityFeeds/{classId} {
      // U≈ºytkownik mo≈ºe czytaƒá feed tylko swojej klasy
      allow read: if isAuthenticated() && 
                     isUserInClass(request.auth.uid, classId);
      
      // Nikt nie mo≈ºe zapisywaƒá do feedu z poziomu aplikacji (tylko Cloud Functions)
      allow write: if false;
    }

    // SUBKOLEKCJA: activityFeeds/{classId}/items (poszczeg√≥lne wpisy w feedzie)
    match /activityFeeds/{classId}/items/{itemId} {
      // U≈ºytkownik mo≈ºe czytaƒá wpisy tylko z feedu swojej klasy
      allow read: if isAuthenticated() && 
                     isUserInClass(request.auth.uid, classId) &&
                     resource.data.classId == classId;

      // Nikt nie mo≈ºe zapisywaƒá wpis√≥w z poziomu aplikacji (tylko Cloud Functions)
      allow write: if false;
    }

    // KOLEKCJA: notifications (powiadomienia)
    match /notifications/{notificationId} {
      // Ka≈ºdy zalogowany mo≈ºe czytaƒá powiadomienia (filtrowanie odbywa siƒô w aplikacji)
      allow read: if isAuthenticated();

      // Tylko nauczyciele i EkoSkop mogƒÖ tworzyƒá powiadomienia
      allow create: if isAuthenticated() && 
                       (getUserRole(request.auth.uid) == 'teacher' || 
                        getUserRole(request.auth.uid) == 'ekoskop') &&
                       isValidNotification();

      // Tylko autor powiadomienia mo≈ºe je aktualizowaƒá (np. dodawaƒá do readBy)
      allow update: if isAuthenticated() && 
                       (request.auth.uid == resource.data.createdBy ||
                        // U≈ºytkownicy mogƒÖ dodawaƒá siebie do readBy
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']) &&
                         request.resource.data.readBy.hasAll(resource.data.readBy)));

      // Tylko autor lub EkoSkop mo≈ºe usuwaƒá powiadomienia
      allow delete: if isAuthenticated() && 
                       (request.auth.uid == resource.data.createdBy ||
                        getUserRole(request.auth.uid) == 'ekoskop');
    }

    // Walidacja danych powiadomienia
    function isValidNotification() {
      let data = request.resource.data;
      return data.keys().hasAll(['title', 'message', 'createdAt', 'createdBy', 'type', 'isGlobal']) &&
             data.title is string &&
             data.message is string &&
             data.createdAt is timestamp &&
             data.createdBy is string &&
             data.type in ['info', 'alert', 'reminder'] &&
             data.isGlobal is bool &&
             (data.readBy == null || data.readBy is list);
    }

    // Domy≈õlne odrzucenie wszystkich innych operacji (zero-trust)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}