rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===== FUNKCJE POMOCNICZE =====
    
    // Funkcja pomocnicza do sprawdzania roli użytkownika
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Sprawdza czy użytkownik jest zalogowany
    function isAuthenticated() {
      return request.auth != null;
    }

    // Sprawdza czy użytkownik jest zweryfikowany (dla uczniów)
    function isUserVerified(userId) {
      let userData = get(/databases/$(database)/documents/users/$(userId)).data;
      return userData.isVerified == true;
    }

    // Funkcja sprawdzająca, czy nauczyciel zarządza daną klasą
    function isTeacherOfClass(classId) {
      let teacherId = get(/databases/$(database)/documents/classes/$(classId)).data.teacherId;
      return request.auth.uid == teacherId;
    }
    
    // Funkcja sprawdzająca, czy zalogowany użytkownik ma rolę 'ekoskop'
    function isRequestUserEkoskop() {
      return getUserRole(request.auth.uid) == 'ekoskop';
    }

    // Sprawdza czy użytkownik należy do konkretnej klasy
    function isUserInClass(userId, classId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.classId == classId;
    }

    // Walidacja danych użytkownika przy tworzeniu/aktualizacji
    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'displayName', 'role']) &&
             data.role in ['student', 'teacher', 'ekoskop'] &&
             data.email is string &&
             data.displayName is string;
    }

    // Walidacja zgłoszenia EkoDziałania
    function isValidSubmission() {
      let data = request.resource.data;
      return data.keys().hasAll(['studentId', 'classId', 'ecoActionId', 'createdAt']) &&
             data.studentId is string &&
             data.classId is string &&
             data.ecoActionId is string &&
             data.createdAt is timestamp &&
             (data.status == null || data.status in ['approved', 'rejected', 'pending']);
    }

    // Walidacja zgłoszenia EkoWyzwania
    function isValidChallengeSubmission() {
      let data = request.resource.data;
      return data.keys().hasAll(['studentId', 'assignedChallengeId', 'classId', 'createdAt']) &&
             data.studentId is string &&
             data.assignedChallengeId is string &&
             data.classId is string &&
             data.createdAt is timestamp &&
             data.status in ['approved', 'rejected', 'pending'];
    }

    // ===== REGUŁY BEZPIECZEŃSTWA =====

    // KOLEKCJA: users
    match /users/{userId} {
      // Każdy zalogowany może czytać profile innych (potrzebne do rankingów, feed'ów)
      allow read: if isAuthenticated();
      
      // Użytkownik może modyfikować tylko swoje dane
      allow write: if isAuthenticated() && 
                      request.auth.uid == userId;

      // Nauczyciel może modyfikować weryfikację ucznia swojej klasy
      allow update: if isAuthenticated() && 
                       getUserRole(request.auth.uid) == 'teacher' &&
                       isUserInClass(userId, get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId) &&
                       // Nauczyciel może tylko zmieniać isVerified
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isVerified']);
    }

    // KOLEKCJA: schools
    match /schools/{schoolId} {
      // Wszystkich zalogowani mogą przeglądać szkoły (potrzebne przy rejestracji)
      allow read: if isAuthenticated();
      
      // Tylko EKOSKOP może zarządzać szkołami
      allow write: if isAuthenticated() && isRequestUserEkoskop();
    }

    // KOLEKCJA: classes
    match /classes/{classId} {
      // Wszyscy zalogowani mogą przeglądać klasy (potrzebne przy rejestracji)
      allow read: if isAuthenticated();
      
      // Tylko nauczyciel klasy lub EKOSKOP może modyfikować
      allow write: if isAuthenticated() && 
                      (isTeacherOfClass(classId) || isRequestUserEkoskop());
    }

    // KOLEKCJA: ecoActions (szablony EkoDziałań)
    match /ecoActions/{ecoActionId} {
      // Wszyscy zalogowani mogą czytać szablony działań
      allow read: if isAuthenticated();
      
      // Tylko EKOSKOP może zarządzać szablonami
      allow write: if isAuthenticated() && isRequestUserEkoskop();
    }

    // KOLEKCJA: badgeTemplates (szablony odznak)
    match /badgeTemplates/{badgeId} {
      // Wszyscy zalogowani mogą czytać definicje odznak
      allow read: if isAuthenticated();
      
      // Tylko EKOSKOP może tworzyć i modyfikować odznaki
      allow write: if isAuthenticated() && isRequestUserEkoskop();
    }

    // KOLEKCJA: challengeTemplates (szablony wyzwań)
    match /challengeTemplates/{templateId} {
      // Wszyscy zalogowani mogą czytać szablony wyzwań
      allow read: if isAuthenticated();
      
      // Tylko EKOSKOP może zarządzać szablonami wyzwań
      allow write: if isAuthenticated() && isRequestUserEkoskop();
    }

    // KOLEKCJA: assignedChallenges (wyzwania przypisane do klas)
    match /assignedChallenges/{assignmentId} {
      // Użytkownicy mogą czytać przypisane wyzwania
      allow read: if isAuthenticated();
    }

    // KOLEKCJA: submissions (zgłoszenia EkoDziałań)
    match /submissions/{submissionId} {
      // Uczeń może tworzyć zgłoszenie tylko dla siebie, jeśli jest zweryfikowany
      allow create: if isAuthenticated() && 
                       request.resource.data.studentId == request.auth.uid &&
                       isUserVerified(request.auth.uid) &&
                       isValidSubmission() &&
                       isUserInClass(request.auth.uid, request.resource.data.classId);

      // Uczeń może czytać swoje zgłoszenia
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.studentId;

      // Nauczyciel może czytać zgłoszenia ze swojej klasy
      allow read: if isAuthenticated() && 
                     getUserRole(request.auth.uid) == 'teacher' &&
                     resource.data.classId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId;

      // Tylko nauczyciel może zmieniać status zgłoszeń uczniów ze swojej klasy
      allow update: if isAuthenticated() && 
                       getUserRole(request.auth.uid) == 'teacher' &&
                       resource.data.classId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId &&
                       request.resource.data.status in ['approved', 'rejected', 'pending'] &&
                       // Zabezpieczenie - można tylko zmienić pola związane z oceną
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['status', 'rejectionReason', 'reviewedBy', 'reviewedAt']);
    }

    // KOLEKCJA: challengeSubmissions (zgłoszenia EkoWyzwań)
    match /challengeSubmissions/{submissionId} {
      // Uczeń może tworzyć zgłoszenie dla siebie, jeśli jest zweryfikowany
      allow create: if isAuthenticated() && 
                       request.resource.data.studentId == request.auth.uid &&
                       isUserVerified(request.auth.uid) &&
                       isValidChallengeSubmission() &&
                       isUserInClass(request.auth.uid, request.resource.data.classId);

      // Uczeń może czytać swoje zgłoszenia
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.studentId;

      // Nauczyciel może czytać zgłoszenia ze swojej klasy
      allow read: if isAuthenticated() && 
                     getUserRole(request.auth.uid) == 'teacher' &&
                     resource.data.classId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId;

      // Nauczyciel może zmieniać status zgłoszeń uczniów ze swojej klasy
      allow update: if isAuthenticated() && 
                       getUserRole(request.auth.uid) == 'teacher' &&
                       resource.data.classId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId &&
                       request.resource.data.status in ['approved', 'rejected', 'pending'] &&
                       // Zabezpieczenie - można tylko zmienić pola związane z oceną
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['status', 'rejectionReason', 'reviewedBy', 'reviewedAt']);
    }

    // KOLEKCJA: activityFeeds (feed aktywności klas)
    match /activityFeeds/{classId} {
      // Użytkownik może czytać feed tylko swojej klasy
      allow read: if isAuthenticated() && 
                     isUserInClass(request.auth.uid, classId);
      
      // Nikt nie może zapisywać do feedu z poziomu aplikacji (tylko Cloud Functions)
      allow write: if false;
    }

    // SUBKOLEKCJA: activityFeeds/{classId}/items (poszczególne wpisy w feedzie)
    match /activityFeeds/{classId}/items/{itemId} {
      // Użytkownik może czytać wpisy tylko z feedu swojej klasy
      allow read: if isAuthenticated() && 
                     isUserInClass(request.auth.uid, classId) &&
                     resource.data.classId == classId;

      // Nikt nie może zapisywać wpisów z poziomu aplikacji (tylko Cloud Functions)
      allow write: if false;
    }

    // Domyślne odrzucenie wszystkich innych operacji (zero-trust)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}